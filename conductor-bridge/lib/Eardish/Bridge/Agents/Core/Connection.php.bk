<?php
namespace Eardish\Bridge\Agents\Core;

use \Eardish\Exceptions;

class Connection
{
    protected $sock;
    protected $port;
    protected $addr;
    protected $loop;
    /**
     * @param $addr String
     * @param $port String
     */
    public function start($addr, $port)
    {
        $this->addr = $addr;
        $this->port = $port;
    }
    public function setLoop($loop)
    {
        $this->loop = $loop;
    }
    /**
     * @param $data array
     * @return string
     * @codeCoverageIgnore
     */
    public function send(array $data, $async = false)
    {
        $this->sock = stream_socket_client($this->addr.':'.$this->port);
       // stream_set_blocking($this->sock, !$async);

        if(!($this->sock)) {
            throw new Exceptions\EDConnectionException("BRIDGE:: cannot connect to networked resource: " . $this->addr . ":" . $this->port);
        }
        if(!(fwrite($this->sock, json_encode($data)))) {
            throw new Exceptions\EDConnectionWriteException("BRIDGE:: cannot write to networked resource: " . $this->addr . ":" . $this->port);
        }

        // if the async flag is set, jump out now
        if((true == $async)) {
            $result['data'][0] = 'success';

            return $result;
        }

        $response = stream_get_contents($this->sock);
        if(!($response)) {
            fclose($this->sock);
            throw new Exceptions\EDConnectionReadException("BRIDGE:: cannot read from networked resource:" . $this->addr . ":" . $this->port);
        }

        $result = json_decode($response, true);

        if(array_key_exists('exception', $result)) {
            throw new Exceptions\EDException($result['exception']['message'], $result['exception']['code']);
        }

        return $result;
    }
    /**
     * Close function to be explicit.
     */
    public function close()
    {
        fclose($this->sock);
    }
}